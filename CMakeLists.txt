cmake_minimum_required(VERSION 3.13)

project(zsim)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

add_library(nlohmann_json INTERFACE)
target_include_directories(nlohmann_json INTERFACE
    ${PROJECT_SOURCE_DIR}/third-party/nlohmann_json/single_include)

add_library(CLI11 INTERFACE)
target_include_directories(CLI11 INTERFACE
    ${PROJECT_SOURCE_DIR}/third-party/CLI11/include)
target_compile_features(CLI11 INTERFACE cxx_auto_type)

set(common_sources src/config.cpp src/galloc.cpp src/log.cpp src/pin_cmd.cpp)

# generate syscall_name.cpp so we can use it below
execute_process(COMMAND python3 ${PROJECT_SOURCE_DIR}/misc/list_syscalls.py
    OUTPUT_FILE ${CMAKE_BINARY_DIR}/syscall_name.cpp
)

# TODO: empty file check on generated file 

# zsim harness has no dependencies on PIN -- just on the JSON/config and argument parser
add_executable(zsim ${common_sources} src/zsim_harness.cpp src/debug_harness.cpp)
target_link_libraries(zsim PRIVATE nlohmann_json CLI11)
target_include_directories(zsim PRIVATE src ${CMAKE_BINARY_DIR})

set(libzsim_sources 
    ${CMAKE_BINARY_DIR}/syscall_name.cpp # generated by python above
    src/access_tracing.cpp
    src/cache.cpp
    src/cache_arrays.cpp
    src/coherence_ctrls.cpp
    src/contention_sim.cpp
    src/core_recorder.cpp
    src/ddr_mem.cpp
    src/debug_zsim.cpp
    src/decoder.cpp
    src/detailed_mem.cpp
    src/detailed_mem_params.cpp
    src/dramsim_mem_ctrl.cpp
    src/hash.cpp
    src/init.cpp
    src/log.cpp
    src/lookahead.cpp
    src/mem_ctrls.cpp
    src/memory_hierarchy.cpp
    src/monitor.cpp
    src/network.cpp
    src/null_core.cpp
    src/ooo_core.cpp
    src/ooo_core_recorder.cpp
    src/parse_vdso.cpp
    src/partition_mapper.cpp
    src/prefetcher.cpp
    src/proc_stats.cpp
    src/process_stats.cpp
    src/process_tree.cpp
    src/scheduler.cpp
    src/simple_core.cpp
    src/stats_filter.cpp
    src/text_stats.cpp
    src/timing_cache.cpp
    src/timing_core.cpp
    src/timing_event.cpp
    src/trace_driver.cpp
    src/tracing_cache.cpp
    src/utility_monitor.cpp
    src/virt/cpu.cpp
    src/virt/fs.cpp
    src/virt/ports.cpp
    src/virt/time.cpp
    src/virt/timeout.cpp
    src/virt/virt.cpp
    src/zsim.cpp
)

# TODO: deal with these later; don't build for now
set(testprograms 
    src/sorttrace.cpp
    src/dumptrace.cpp
    src/fftoggle.cpp
)

# TODO: use a finder for pin
set(PIN_ROOT $ENV{PINPATH})
if (NOT PIN_ROOT)
    message(FATAL_ERROR "Please set $PINPATH")
else()
    message(STATUS "Pin is at ${PIN_ROOT}")
endif()

set(PIN_INCLUDE_DIR ${PIN_ROOT}/source/include/pin)
set(PIN_LIBRARY_DIR ${PIN_ROOT}/intel64/lib)
set(PIN_LIBRARIES pin xed pindwarf)

add_library(PIN INTERFACE)
target_link_libraries(PIN INTERFACE ${PIN_LIBRARIES})
target_link_directories(PIN INTERFACE ${PIN_LIBRARY_DIR} 
    ${PIN_ROOT}/extras/xed-intel64/lib
    ${PIN_ROOT}/intel64/lib-ext
    )

target_include_directories(PIN INTERFACE ${PIN_INCLUDE_DIR} 
    ${PIN_ROOT}/source/include/pin/gen 
    ${PIN_ROOT}/extras/components/include 
    ${PIN_ROOT}/extras/xed-intel64/include
    )

target_link_options(PIN INTERFACE 
    "-Wl,--hash-style=sysv" 
    "-Wl,-Bsymbolic" 
    "-Wl,--version-script=${PIN_ROOT}/source/include/pin/pintool.ver"
)

# normally we would not explicitly specify SHARED but in this case it's the
# only thing that makes sense since this is a pin tool that must be dynamically
# loaded by PIN 
add_library(libzsim SHARED ${libzsim_sources} ${common_sources})
target_include_directories(libzsim PRIVATE src ${CMAKE_BINARY_DIR})
target_compile_options(libzsim PUBLIC "-std=c++0x" "-march=core2")
target_link_libraries(libzsim PRIVATE nlohmann_json PIN) 
set_target_properties(libzsim PROPERTIES LIBRARY_OUTPUT_NAME zsim)



target_compile_definitions(libzsim PRIVATE TARGET_IA32E HOST_IA32E TARGET_LINUX USING_XED )

# TODO: add git build information
set(PIN_PATH ${PIN_ROOT}/intel64/bin/pinbin)
set(ZSIM_PATH ${CMAKE_BINARY_DIR}/libzsim.so)
configure_file(build.h.in ${CMAKE_BINARY_DIR}/build.h)
